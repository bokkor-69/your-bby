const axios = require('axios');

// API URLs
const tOrDApiUrl = "https://t-d-bokkor.vercel.app";  // Updated API URL
const adminUID = '61558455297317';

module.exports = {
  config: {
    name: "tord",
    version: "1.2.3",
    author: " ô·¥è·¥ã·¥ã·¥è Ä",
    role: 0,
    description: "{pn} - Truth or Dare game",
    category: "games",
    countDown: 5,
    guide: {
      en: "{pn} t | d | add <new question> | rmv <question> | count <t|d> | list <t|d>"
    }
  },

  onStart: async function ({ message, event, args, api }) {
    try {
      const command = args[0];
      const userID = event.senderID;

      // ‚úÖ Add new question (anyone can add)
      if (command === 'add') {
        if (!args[1]) {
          return api.sendMessage("‚ö† ·¥ò ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä …¥·¥á·¥° ·¥õ Ä·¥ú·¥õ ú ·¥è Ä ·¥Ö·¥Ä Ä·¥á «´·¥ú·¥ás·¥õ…™·¥è…¥!", event.threadID, event.messageID);
        }

        const newDare = args.slice(2).join(' ');

        if (args[1] === "t") {
          await axios.get(`${tOrDApiUrl}/add/t?t=${encodeURIComponent(newDare)}`);
          return api.sendMessage(`‚úÖ | …¥·¥á·¥° «´·¥ú·¥ás·¥õ…™·¥è…¥ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö "Truth" : ${newDare}`, event.threadID, event.messageID);
        } else if (args[1] === "d") {
          await axios.get(`${tOrDApiUrl}/add/d?d=${encodeURIComponent(newDare)}`);
          return api.sendMessage(`‚úÖ | …¥·¥á·¥° «´·¥ú·¥ás·¥õ…™·¥è…¥ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö "Dare" : ${newDare}`, event.threadID, event.messageID);
        }
      }

      // ‚úÖ "tord rmv" - Remove a question
      if (command === 'rmv') {
        if (!args[1]) {
          return api.sendMessage("‚ö† ·¥ò ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä «´·¥ú·¥ás·¥õ…™·¥è…¥ ·¥õ·¥è  Ä·¥á·¥ç·¥è·¥†·¥á!", event.threadID, event.messageID);
        }
        const questionToRemove = args.slice(2).join(' ');

        if (args[1] === "t") {
          await axios.get(`${tOrDApiUrl}/rmv/t?t=${encodeURIComponent(questionToRemove)}`);
          return api.sendMessage(`‚úÖ | «´·¥ú·¥ás·¥õ…™·¥è…¥  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö "Truth" : ${questionToRemove}`, event.threadID, event.messageID);
        } else if (args[1] === "d") {
          await axios.get(`${tOrDApiUrl}/rmv/d?d=${encodeURIComponent(questionToRemove)}`);
          return api.sendMessage(`‚úÖ | «´·¥ú·¥ás·¥õ…™·¥è…¥  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö "Dare" : ${questionToRemove}`, event.threadID, event.messageID);
        }
      }

      // ‚úÖ "tord count" - Get count of questions
      if (command === 'count') {
        if (args[1] !== 't' && args[1] !== 'd') {
          return api.sendMessage("‚ö† ·¥ò ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä ·¥†·¥Ä ü…™·¥Ö ·¥õ è·¥ò·¥á (·¥õ|·¥Ö)", event.threadID, event.messageID);
        }
        const response = await axios.get(`${tOrDApiUrl}/count/${args[1]}`);
        const count = response.data.count;
        const message = `${args[1] === 't' ? 'Truth' : 'Dare'} questions count: ${count}`;
        return api.sendMessage(message, event.threadID, event.messageID);
      }

      // ‚úÖ "tord list" - Get list of questions
      if (command === 'list') {
        if (args[1] !== 't' && args[1] !== 'd') {
          return api.sendMessage("‚ö† ·¥ò ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä ·¥†·¥Ä ü…™·¥Ö ·¥õ è·¥ò·¥á (·¥õ|·¥Ö)", event.threadID, event.messageID);
        }
        const response = await axios.get(`${tOrDApiUrl}/count/${args[1]}`);
        const questions = response.data.questions.join('\n');
        return api.sendMessage(`${args[1] === 't' ? 'Truth' : 'Dare'} questions list: \n${questions}`, event.threadID, event.messageID);
      }

      // ‚úÖ "tord t" - Get a Truth question
      if (command === 't') {
        const response = await axios.get(`${tOrDApiUrl}/t`);
        const question = response.data.question || "‚ùå |…¥·¥è «´·¥ú·¥ás·¥õ…™·¥è…¥ “ì·¥è·¥ú…¥·¥Ö!";
        return api.sendMessage(`‚ú®üê£ |·¥õ Ä·¥ú·¥õ ú «´·¥ú·¥ás·¥õ…™·¥è…¥: ${question}`, event.threadID, event.messageID);
      }

      // ‚úÖ "tord d" - Get a Dare question
      if (command === 'd') {
        const response = await axios.get(`${tOrDApiUrl}/d`);
        const { question } = response.data || "‚ùå |…¥·¥è «´·¥ú·¥ás·¥õ…™·¥è…¥ “ì·¥è·¥ú…¥·¥Ö!";
        return api.sendMessage(`üí•üòé |·¥Ö·¥Ä Ä·¥á ·¥Ñ ú·¥Ä ü ü·¥á…¥…¢·¥á: ${question}`, event.threadID, event.messageID);
      }

      // ‚úÖ Any Reply Detection
      if (event.type === "message_reply") {
        return api.sendMessage("‚úÖ |·¥Ñ·¥è…¥…¢ Ä·¥Ä·¥õ·¥ú ü·¥Ä·¥õ…™·¥è…¥s!", event.threadID, event.messageID);
      }

      // ‚ùå Invalid Command
      return api.sendMessage(
        "‚ö† |…™…¥·¥†·¥Ä ü…™·¥Ö ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö! ·¥ús·¥á:\n- ·¥õ·¥è Ä·¥Ö ·¥õ (·¥õ Ä·¥ú·¥õ ú «´·¥ú·¥ás·¥õ…™·¥è…¥)\n- ·¥õ·¥è Ä·¥Ö ·¥Ö (·¥Ö·¥Ä Ä·¥á «´·¥ú·¥ás·¥õ…™·¥è…¥)\n- ·¥õ·¥è Ä·¥Ö ·¥Ä·¥Ö·¥Ö <…¥·¥á·¥° «´·¥ú·¥ás·¥õ…™·¥è…¥> (·¥á·¥†·¥á Ä è·¥è…¥·¥á ·¥Ñ·¥Ä…¥ ·¥Ä·¥Ö·¥Ö)\n- ·¥õ·¥è Ä·¥Ö  Ä·¥ç·¥† <question>\n- ·¥õ·¥è Ä·¥Ö ·¥Ñ·¥è·¥ú…¥·¥õ ·¥õ/·¥Ö\n- ·¥õ·¥è Ä·¥Ö  ü…™s·¥õ ·¥õ/·¥Ö", 
        event.threadID, event.messageID
      );

    } catch (error) {
      await api.sendMessage(`‚ùå |Error: ${error.message}`, event.threadID, event.messageID);
    }
  }
};
